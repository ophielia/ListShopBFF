// Generated by Touchlab SKIE 0.10.0

import Foundation

public final class SkieSwiftFlow<T> : allshared.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {

    @_spi(SKIE)
    public let delegate: allshared.Kotlinx_coroutines_coreFlow

    init(`internal` flow: allshared.Kotlinx_coroutines_coreFlow) {
        delegate = flow
    }

    public static func _forceBridgeFromObjectiveC(_ source: allshared.SkieKotlinFlow<Swift.AnyObject>, result: inout allshared.SkieSwiftFlow<T>?) -> Swift.Void {
        result = fromObjectiveC(source)
    }

    public static func _conditionallyBridgeFromObjectiveC(_ source: allshared.SkieKotlinFlow<Swift.AnyObject>, result: inout allshared.SkieSwiftFlow<T>?) -> Swift.Bool {
        result = fromObjectiveC(source)
        return true
    }

    public static func _unconditionallyBridgeFromObjectiveC(_ source: allshared.SkieKotlinFlow<Swift.AnyObject>?) -> Self {
        return fromObjectiveC(source)
    }

    public func _bridgeToObjectiveC() -> allshared.SkieKotlinFlow<Swift.AnyObject> {
        return allshared.SkieKotlinFlow(delegate)
    }

    private static func fromObjectiveC(_ source: allshared.SkieKotlinFlow<Swift.AnyObject>?) -> Self {
        guard let source = source else {
            fatalError("Couldn't map value of \(Swift.String(describing: source)) to allshared.SkieSwiftFlow")
        }
        return .init(internal: source)
    }

    public func makeAsyncIterator() -> allshared.SkieSwiftFlowIterator<T> {
        return SkieSwiftFlowIterator(flow: delegate)
    }

    public typealias AsyncIterator = allshared.SkieSwiftFlowIterator<T>

    public typealias Element = T

    public typealias _ObjectiveCType = allshared.SkieKotlinFlow<Swift.AnyObject>

}
