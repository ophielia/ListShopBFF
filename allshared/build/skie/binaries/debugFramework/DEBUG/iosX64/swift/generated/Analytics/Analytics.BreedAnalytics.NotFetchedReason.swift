// Generated by Touchlab SKIE 0.10.0

import Foundation

extension allshared.BreedAnalytics {

    public typealias NotFetchedReason = allshared.__Bridge__BreedAnalytics_NotFetchedReason

}

extension allshared.BreedAnalytics.NotFetchedReason {

    public func toKotlinEnum() -> allshared.BreedAnalytics.__NotFetchedReason {
        return _bridgeToObjectiveC()
    }

}

extension allshared.BreedAnalytics.__NotFetchedReason {

    public func toSwiftEnum() -> allshared.BreedAnalytics.NotFetchedReason {
        return allshared.BreedAnalytics.NotFetchedReason._unconditionallyBridgeFromObjectiveC(self)
    }

}

@frozen
public enum __Bridge__BreedAnalytics_NotFetchedReason : Swift.Hashable, Swift.CaseIterable,
        Swift._ObjectiveCBridgeable {

    case notStale
    case networkError
    case randomFail

    public var name: Swift.String {
        return (self as _ObjectiveCType).name
    }

    public var ordinal: Swift.Int32 {
        return (self as _ObjectiveCType).ordinal
    }

    public static func _forceBridgeFromObjectiveC(_ source: allshared.BreedAnalytics.__NotFetchedReason, result: inout allshared.BreedAnalytics.NotFetchedReason?) -> Swift.Void {
        result = fromObjectiveC(source)
    }

    public static func _conditionallyBridgeFromObjectiveC(_ source: allshared.BreedAnalytics.__NotFetchedReason, result: inout allshared.BreedAnalytics.NotFetchedReason?) -> Swift.Bool {
        result = fromObjectiveC(source)
        return true
    }

    public static func _unconditionallyBridgeFromObjectiveC(_ source: allshared.BreedAnalytics.__NotFetchedReason?) -> Self {
        return fromObjectiveC(source)
    }

    public func _bridgeToObjectiveC() -> allshared.BreedAnalytics.__NotFetchedReason {
        switch self {
        case .notStale: return allshared.BreedAnalytics.__NotFetchedReason.notStale as allshared.BreedAnalytics.__NotFetchedReason
        case .networkError: return allshared.BreedAnalytics.__NotFetchedReason.networkError as allshared.BreedAnalytics.__NotFetchedReason
        case .randomFail: return allshared.BreedAnalytics.__NotFetchedReason.randomFail as allshared.BreedAnalytics.__NotFetchedReason
        }
    }

    private static func fromObjectiveC(_ source: allshared.BreedAnalytics.__NotFetchedReason?) -> Self {
        guard let source = source else {
            fatalError("Couldn't map value of \(Swift.String(describing: source)) to allshared.BreedAnalytics.NotFetchedReason")
        }
        if source == allshared.BreedAnalytics.__NotFetchedReason.notStale as allshared.BreedAnalytics.__NotFetchedReason {
            return .notStale
        } else if source == allshared.BreedAnalytics.__NotFetchedReason.networkError as allshared.BreedAnalytics.__NotFetchedReason {
            return .networkError
        } else if source == allshared.BreedAnalytics.__NotFetchedReason.randomFail as allshared.BreedAnalytics.__NotFetchedReason {
            return .randomFail
        } else {
            fatalError("Couldn't map value of \(Swift.String(describing: source)) to allshared.BreedAnalytics.__NotFetchedReason")
        }
    }

    public typealias _ObjectiveCType = allshared.BreedAnalytics.__NotFetchedReason

}
