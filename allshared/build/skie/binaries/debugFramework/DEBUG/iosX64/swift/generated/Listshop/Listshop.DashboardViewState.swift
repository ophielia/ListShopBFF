// Generated by Touchlab SKIE 0.10.0

import Foundation

@frozen
public enum ListshopDashboardViewState : Swift.Hashable, Swift.CaseIterable,
        Swift._ObjectiveCBridgeable {

    case accountView
    case accountLoggedOut
    case accountNoAccount
    case changePassword
    case delete
    case deleteConfirm
    case mainDashboard
    case guidesAndSupport
    case about
    case aboutTheApp
    case thirdParty
    case privacy
    case fullPrivacy

    public var name: Swift.String {
        return (self as _ObjectiveCType).name
    }

    public var ordinal: Swift.Int32 {
        return (self as _ObjectiveCType).ordinal
    }

    public static func _forceBridgeFromObjectiveC(_ source: allshared.__ListshopDashboardViewState, result: inout allshared.ListshopDashboardViewState?) -> Swift.Void {
        result = fromObjectiveC(source)
    }

    public static func _conditionallyBridgeFromObjectiveC(_ source: allshared.__ListshopDashboardViewState, result: inout allshared.ListshopDashboardViewState?) -> Swift.Bool {
        result = fromObjectiveC(source)
        return true
    }

    public static func _unconditionallyBridgeFromObjectiveC(_ source: allshared.__ListshopDashboardViewState?) -> Self {
        return fromObjectiveC(source)
    }

    public func _bridgeToObjectiveC() -> allshared.__ListshopDashboardViewState {
        switch self {
        case .accountView: return allshared.__ListshopDashboardViewState.accountView as allshared.__ListshopDashboardViewState
        case .accountLoggedOut: return allshared.__ListshopDashboardViewState.accountLoggedOut as allshared.__ListshopDashboardViewState
        case .accountNoAccount: return allshared.__ListshopDashboardViewState.accountNoAccount as allshared.__ListshopDashboardViewState
        case .changePassword: return allshared.__ListshopDashboardViewState.changePassword as allshared.__ListshopDashboardViewState
        case .delete: return allshared.__ListshopDashboardViewState.delete as allshared.__ListshopDashboardViewState
        case .deleteConfirm: return allshared.__ListshopDashboardViewState.deleteConfirm as allshared.__ListshopDashboardViewState
        case .mainDashboard: return allshared.__ListshopDashboardViewState.mainDashboard as allshared.__ListshopDashboardViewState
        case .guidesAndSupport: return allshared.__ListshopDashboardViewState.guidesAndSupport as allshared.__ListshopDashboardViewState
        case .about: return allshared.__ListshopDashboardViewState.about as allshared.__ListshopDashboardViewState
        case .aboutTheApp: return allshared.__ListshopDashboardViewState.aboutTheApp as allshared.__ListshopDashboardViewState
        case .thirdParty: return allshared.__ListshopDashboardViewState.thirdParty as allshared.__ListshopDashboardViewState
        case .privacy: return allshared.__ListshopDashboardViewState.privacy as allshared.__ListshopDashboardViewState
        case .fullPrivacy: return allshared.__ListshopDashboardViewState.fullPrivacy as allshared.__ListshopDashboardViewState
        }
    }

    private static func fromObjectiveC(_ source: allshared.__ListshopDashboardViewState?) -> Self {
        guard let source = source else {
            fatalError("Couldn't map value of \(Swift.String(describing: source)) to allshared.ListshopDashboardViewState")
        }
        if source == allshared.__ListshopDashboardViewState.accountView as allshared.__ListshopDashboardViewState {
            return .accountView
        } else if source == allshared.__ListshopDashboardViewState.accountLoggedOut as allshared.__ListshopDashboardViewState {
            return .accountLoggedOut
        } else if source == allshared.__ListshopDashboardViewState.accountNoAccount as allshared.__ListshopDashboardViewState {
            return .accountNoAccount
        } else if source == allshared.__ListshopDashboardViewState.changePassword as allshared.__ListshopDashboardViewState {
            return .changePassword
        } else if source == allshared.__ListshopDashboardViewState.delete as allshared.__ListshopDashboardViewState {
            return .delete
        } else if source == allshared.__ListshopDashboardViewState.deleteConfirm as allshared.__ListshopDashboardViewState {
            return .deleteConfirm
        } else if source == allshared.__ListshopDashboardViewState.mainDashboard as allshared.__ListshopDashboardViewState {
            return .mainDashboard
        } else if source == allshared.__ListshopDashboardViewState.guidesAndSupport as allshared.__ListshopDashboardViewState {
            return .guidesAndSupport
        } else if source == allshared.__ListshopDashboardViewState.about as allshared.__ListshopDashboardViewState {
            return .about
        } else if source == allshared.__ListshopDashboardViewState.aboutTheApp as allshared.__ListshopDashboardViewState {
            return .aboutTheApp
        } else if source == allshared.__ListshopDashboardViewState.thirdParty as allshared.__ListshopDashboardViewState {
            return .thirdParty
        } else if source == allshared.__ListshopDashboardViewState.privacy as allshared.__ListshopDashboardViewState {
            return .privacy
        } else if source == allshared.__ListshopDashboardViewState.fullPrivacy as allshared.__ListshopDashboardViewState {
            return .fullPrivacy
        } else {
            fatalError("Couldn't map value of \(Swift.String(describing: source)) to allshared.__ListshopDashboardViewState")
        }
    }

    public typealias _ObjectiveCType = allshared.__ListshopDashboardViewState

}

extension allshared.ListshopDashboardViewState {

    public func toKotlinEnum() -> allshared.__ListshopDashboardViewState {
        return _bridgeToObjectiveC()
    }

}

extension allshared.__ListshopDashboardViewState {

    public func toSwiftEnum() -> allshared.ListshopDashboardViewState {
        return allshared.ListshopDashboardViewState._unconditionallyBridgeFromObjectiveC(self)
    }

}
