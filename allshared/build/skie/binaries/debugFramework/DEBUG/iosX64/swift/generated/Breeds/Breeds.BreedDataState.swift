// Generated by Touchlab SKIE 0.10.0

import Foundation

extension allshared.Skie.Breeds.BreedDataState {

    @frozen
    public enum __Sealed : Swift.Hashable {

        case cached(allshared.BreedsBreedDataState.Cached)
        case empty(allshared.BreedsBreedDataState.Empty)

    }

}

public func onEnum<__Sealed : allshared.BreedsBreedDataState>(of sealed: __Sealed) -> allshared.Skie.Breeds.BreedDataState.__Sealed {
    if let sealed = sealed as? allshared.BreedsBreedDataState.Cached {
        return allshared.Skie.Breeds.BreedDataState.__Sealed.cached(sealed)
    } else if let sealed = sealed as? allshared.BreedsBreedDataState.Empty {
        return allshared.Skie.Breeds.BreedDataState.__Sealed.empty(sealed)
    } else {
        fatalError("Unknown subtype \(sealed). This error should not happen under normal circumstances since SirClass: allshared.BreedsBreedDataState is sealed.")
    }
}

@_disfavoredOverload
public func onEnum<__Sealed : allshared.BreedsBreedDataState>(of sealed: __Sealed?) -> allshared.Skie.Breeds.BreedDataState.__Sealed? {
    if let sealed {
        return onEnum(of: sealed) as allshared.Skie.Breeds.BreedDataState.__Sealed
    } else {
        return nil
    }
}
