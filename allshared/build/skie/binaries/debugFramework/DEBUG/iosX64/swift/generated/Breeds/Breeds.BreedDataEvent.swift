// Generated by Touchlab SKIE 0.10.0

import Foundation

extension allshared.Skie.Breeds.BreedDataEvent {

    @frozen
    public enum __Sealed : Swift.Hashable {

        case error(allshared.BreedsBreedDataEvent.Error)
        case initial(allshared.BreedsBreedDataEvent.Initial)
        case loading(allshared.BreedsBreedDataEvent.Loading)
        case refreshedSuccess(allshared.BreedsBreedDataEvent.RefreshedSuccess)

    }

}

public func onEnum<__Sealed : allshared.BreedsBreedDataEvent>(of sealed: __Sealed) -> allshared.Skie.Breeds.BreedDataEvent.__Sealed {
    if let sealed = sealed as? allshared.BreedsBreedDataEvent.Error {
        return allshared.Skie.Breeds.BreedDataEvent.__Sealed.error(sealed)
    } else if let sealed = sealed as? allshared.BreedsBreedDataEvent.Initial {
        return allshared.Skie.Breeds.BreedDataEvent.__Sealed.initial(sealed)
    } else if let sealed = sealed as? allshared.BreedsBreedDataEvent.Loading {
        return allshared.Skie.Breeds.BreedDataEvent.__Sealed.loading(sealed)
    } else if let sealed = sealed as? allshared.BreedsBreedDataEvent.RefreshedSuccess {
        return allshared.Skie.Breeds.BreedDataEvent.__Sealed.refreshedSuccess(sealed)
    } else {
        fatalError("Unknown subtype \(sealed). This error should not happen under normal circumstances since SirClass: allshared.BreedsBreedDataEvent is sealed.")
    }
}

@_disfavoredOverload
public func onEnum<__Sealed : allshared.BreedsBreedDataEvent>(of sealed: __Sealed?) -> allshared.Skie.Breeds.BreedDataEvent.__Sealed? {
    if let sealed {
        return onEnum(of: sealed) as allshared.Skie.Breeds.BreedDataEvent.__Sealed
    } else {
        return nil
    }
}
