// Generated by Touchlab SKIE 0.10.0

import Foundation

@frozen
public enum ListshopOnboardingViewState : Swift.Hashable, Swift.CaseIterable,
        Swift._ObjectiveCBridgeable {

    case choose
    case signIn
    case signUp
    case forgotPassword
    case passwordProcessed
    case loggedIn

    public var name: Swift.String {
        return (self as _ObjectiveCType).name
    }

    public var ordinal: Swift.Int32 {
        return (self as _ObjectiveCType).ordinal
    }

    public static func _forceBridgeFromObjectiveC(_ source: allshared.__ListshopOnboardingViewState, result: inout allshared.ListshopOnboardingViewState?) -> Swift.Void {
        result = fromObjectiveC(source)
    }

    public static func _conditionallyBridgeFromObjectiveC(_ source: allshared.__ListshopOnboardingViewState, result: inout allshared.ListshopOnboardingViewState?) -> Swift.Bool {
        result = fromObjectiveC(source)
        return true
    }

    public static func _unconditionallyBridgeFromObjectiveC(_ source: allshared.__ListshopOnboardingViewState?) -> Self {
        return fromObjectiveC(source)
    }

    public func _bridgeToObjectiveC() -> allshared.__ListshopOnboardingViewState {
        switch self {
        case .choose: return allshared.__ListshopOnboardingViewState.choose as allshared.__ListshopOnboardingViewState
        case .signIn: return allshared.__ListshopOnboardingViewState.signIn as allshared.__ListshopOnboardingViewState
        case .signUp: return allshared.__ListshopOnboardingViewState.signUp as allshared.__ListshopOnboardingViewState
        case .forgotPassword: return allshared.__ListshopOnboardingViewState.forgotPassword as allshared.__ListshopOnboardingViewState
        case .passwordProcessed: return allshared.__ListshopOnboardingViewState.passwordProcessed as allshared.__ListshopOnboardingViewState
        case .loggedIn: return allshared.__ListshopOnboardingViewState.loggedIn as allshared.__ListshopOnboardingViewState
        }
    }

    private static func fromObjectiveC(_ source: allshared.__ListshopOnboardingViewState?) -> Self {
        guard let source = source else {
            fatalError("Couldn't map value of \(Swift.String(describing: source)) to allshared.ListshopOnboardingViewState")
        }
        if source == allshared.__ListshopOnboardingViewState.choose as allshared.__ListshopOnboardingViewState {
            return .choose
        } else if source == allshared.__ListshopOnboardingViewState.signIn as allshared.__ListshopOnboardingViewState {
            return .signIn
        } else if source == allshared.__ListshopOnboardingViewState.signUp as allshared.__ListshopOnboardingViewState {
            return .signUp
        } else if source == allshared.__ListshopOnboardingViewState.forgotPassword as allshared.__ListshopOnboardingViewState {
            return .forgotPassword
        } else if source == allshared.__ListshopOnboardingViewState.passwordProcessed as allshared.__ListshopOnboardingViewState {
            return .passwordProcessed
        } else if source == allshared.__ListshopOnboardingViewState.loggedIn as allshared.__ListshopOnboardingViewState {
            return .loggedIn
        } else {
            fatalError("Couldn't map value of \(Swift.String(describing: source)) to allshared.__ListshopOnboardingViewState")
        }
    }

    public typealias _ObjectiveCType = allshared.__ListshopOnboardingViewState

}

extension allshared.ListshopOnboardingViewState {

    public func toKotlinEnum() -> allshared.__ListshopOnboardingViewState {
        return _bridgeToObjectiveC()
    }

}

extension allshared.__ListshopOnboardingViewState {

    public func toSwiftEnum() -> allshared.ListshopOnboardingViewState {
        return allshared.ListshopOnboardingViewState._unconditionallyBridgeFromObjectiveC(self)
    }

}
