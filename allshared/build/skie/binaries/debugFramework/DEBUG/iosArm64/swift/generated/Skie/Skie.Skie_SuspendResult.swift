// Generated by Touchlab SKIE 0.10.0

import Foundation

extension allshared.Skie.RuntimeKotlin.Skie_SuspendResult {

    @frozen
    public enum __Sealed : Swift.Hashable {

        case canceled(allshared.Skie_SuspendResult.Canceled)
        case error(allshared.Skie_SuspendResult.Error)
        case success(allshared.Skie_SuspendResult.Success)

    }

}

public func onEnum<__Sealed : allshared.Skie_SuspendResult>(of sealed: __Sealed) -> allshared.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed {
    if let sealed = sealed as? allshared.Skie_SuspendResult.Canceled {
        return allshared.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed.canceled(sealed)
    } else if let sealed = sealed as? allshared.Skie_SuspendResult.Error {
        return allshared.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed.error(sealed)
    } else if let sealed = sealed as? allshared.Skie_SuspendResult.Success {
        return allshared.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed.success(sealed)
    } else {
        fatalError("Unknown subtype \(sealed). This error should not happen under normal circumstances since SirClass: allshared.Skie_SuspendResult is sealed.")
    }
}

@_disfavoredOverload
public func onEnum<__Sealed : allshared.Skie_SuspendResult>(of sealed: __Sealed?) -> allshared.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed? {
    if let sealed {
        return onEnum(of: sealed) as allshared.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed
    } else {
        return nil
    }
}
