// Generated by Touchlab SKIE 0.10.0

import Foundation

@frozen
public enum ListshopUserSessionState : Swift.Hashable, Swift.CaseIterable,
        Swift._ObjectiveCBridgeable {

    case user
    case userLoggedOut
    case anon
    case anonNoList

    public var name: Swift.String {
        return (self as _ObjectiveCType).name
    }

    public var ordinal: Swift.Int32 {
        return (self as _ObjectiveCType).ordinal
    }

    public static func _forceBridgeFromObjectiveC(_ source: allshared.__ListshopUserSessionState, result: inout allshared.ListshopUserSessionState?) -> Swift.Void {
        result = fromObjectiveC(source)
    }

    public static func _conditionallyBridgeFromObjectiveC(_ source: allshared.__ListshopUserSessionState, result: inout allshared.ListshopUserSessionState?) -> Swift.Bool {
        result = fromObjectiveC(source)
        return true
    }

    public static func _unconditionallyBridgeFromObjectiveC(_ source: allshared.__ListshopUserSessionState?) -> Self {
        return fromObjectiveC(source)
    }

    public func _bridgeToObjectiveC() -> allshared.__ListshopUserSessionState {
        switch self {
        case .user: return allshared.__ListshopUserSessionState.user as allshared.__ListshopUserSessionState
        case .userLoggedOut: return allshared.__ListshopUserSessionState.userLoggedOut as allshared.__ListshopUserSessionState
        case .anon: return allshared.__ListshopUserSessionState.anon as allshared.__ListshopUserSessionState
        case .anonNoList: return allshared.__ListshopUserSessionState.anonNoList as allshared.__ListshopUserSessionState
        }
    }

    private static func fromObjectiveC(_ source: allshared.__ListshopUserSessionState?) -> Self {
        guard let source = source else {
            fatalError("Couldn't map value of \(Swift.String(describing: source)) to allshared.ListshopUserSessionState")
        }
        if source == allshared.__ListshopUserSessionState.user as allshared.__ListshopUserSessionState {
            return .user
        } else if source == allshared.__ListshopUserSessionState.userLoggedOut as allshared.__ListshopUserSessionState {
            return .userLoggedOut
        } else if source == allshared.__ListshopUserSessionState.anon as allshared.__ListshopUserSessionState {
            return .anon
        } else if source == allshared.__ListshopUserSessionState.anonNoList as allshared.__ListshopUserSessionState {
            return .anonNoList
        } else {
            fatalError("Couldn't map value of \(Swift.String(describing: source)) to allshared.__ListshopUserSessionState")
        }
    }

    public typealias _ObjectiveCType = allshared.__ListshopUserSessionState

}

extension allshared.ListshopUserSessionState {

    public func toKotlinEnum() -> allshared.__ListshopUserSessionState {
        return _bridgeToObjectiveC()
    }

}

extension allshared.__ListshopUserSessionState {

    public func toSwiftEnum() -> allshared.ListshopUserSessionState {
        return allshared.ListshopUserSessionState._unconditionallyBridgeFromObjectiveC(self)
    }

}
