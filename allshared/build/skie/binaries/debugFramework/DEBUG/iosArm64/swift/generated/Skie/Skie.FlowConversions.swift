// Generated by Touchlab SKIE 0.10.0

import Foundation

public func SkieKotlinFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftFlow<T>) -> allshared.SkieKotlinFlow<T> {
    return allshared.SkieKotlinFlow(flow.delegate)
}

public func SkieKotlinFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftSharedFlow<T>) -> allshared.SkieKotlinFlow<T> {
    return allshared.SkieKotlinFlow(flow.delegate)
}

public func SkieKotlinFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftMutableSharedFlow<T>) -> allshared.SkieKotlinFlow<T> {
    return allshared.SkieKotlinFlow(flow.delegate)
}

public func SkieKotlinFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftStateFlow<T>) -> allshared.SkieKotlinFlow<T> {
    return allshared.SkieKotlinFlow(flow.delegate)
}

public func SkieKotlinFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftMutableStateFlow<T>) -> allshared.SkieKotlinFlow<T> {
    return allshared.SkieKotlinFlow(flow.delegate)
}

public func SkieKotlinFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftFlow<T>) -> allshared.SkieKotlinFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinFlow(flow.delegate)
}

public func SkieKotlinFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftSharedFlow<T>) -> allshared.SkieKotlinFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinFlow(flow.delegate)
}

public func SkieKotlinFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftMutableSharedFlow<T>) -> allshared.SkieKotlinFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinFlow(flow.delegate)
}

public func SkieKotlinFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftStateFlow<T>) -> allshared.SkieKotlinFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinFlow(flow.delegate)
}

public func SkieKotlinFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftMutableStateFlow<T>) -> allshared.SkieKotlinFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinFlow(flow.delegate)
}

extension allshared.SkieSwiftFlow where T : Swift.AnyObject {

    public convenience init(_ flow: allshared.SkieKotlinFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinMutableSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieSwiftFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

extension allshared.SkieSwiftFlow where T : Swift._ObjectiveCBridgeable {

    public convenience init(_ flow: allshared.SkieKotlinFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieSwiftFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

public func SkieKotlinOptionalFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftFlow<T>) -> allshared.SkieKotlinOptionalFlow<T> {
    return allshared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftOptionalFlow<T>) -> allshared.SkieKotlinOptionalFlow<T> {
    return allshared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftSharedFlow<T>) -> allshared.SkieKotlinOptionalFlow<T> {
    return allshared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftOptionalSharedFlow<T>) -> allshared.SkieKotlinOptionalFlow<T> {
    return allshared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftMutableSharedFlow<T>) -> allshared.SkieKotlinOptionalFlow<T> {
    return allshared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftOptionalMutableSharedFlow<T>) -> allshared.SkieKotlinOptionalFlow<T> {
    return allshared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftStateFlow<T>) -> allshared.SkieKotlinOptionalFlow<T> {
    return allshared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftOptionalStateFlow<T>) -> allshared.SkieKotlinOptionalFlow<T> {
    return allshared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftMutableStateFlow<T>) -> allshared.SkieKotlinOptionalFlow<T> {
    return allshared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftOptionalMutableStateFlow<T>) -> allshared.SkieKotlinOptionalFlow<T> {
    return allshared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftFlow<T>) -> allshared.SkieKotlinOptionalFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftOptionalFlow<T>) -> allshared.SkieKotlinOptionalFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftSharedFlow<T>) -> allshared.SkieKotlinOptionalFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftOptionalSharedFlow<T>) -> allshared.SkieKotlinOptionalFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftMutableSharedFlow<T>) -> allshared.SkieKotlinOptionalFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftOptionalMutableSharedFlow<T>) -> allshared.SkieKotlinOptionalFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftStateFlow<T>) -> allshared.SkieKotlinOptionalFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftOptionalStateFlow<T>) -> allshared.SkieKotlinOptionalFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftMutableStateFlow<T>) -> allshared.SkieKotlinOptionalFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinOptionalFlow(flow.delegate)
}

public func SkieKotlinOptionalFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftOptionalMutableStateFlow<T>) -> allshared.SkieKotlinOptionalFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinOptionalFlow(flow.delegate)
}

extension allshared.SkieSwiftOptionalFlow where T : Swift.AnyObject {

    public convenience init(_ flow: allshared.SkieKotlinFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinOptionalFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinOptionalSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinMutableSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinOptionalMutableSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinOptionalStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinOptionalMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieSwiftFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

extension allshared.SkieSwiftOptionalFlow where T : Swift._ObjectiveCBridgeable {

    public convenience init(_ flow: allshared.SkieKotlinFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinOptionalFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinOptionalStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieSwiftFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

public func SkieKotlinSharedFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftSharedFlow<T>) -> allshared.SkieKotlinSharedFlow<T> {
    return allshared.SkieKotlinSharedFlow(flow.delegate)
}

public func SkieKotlinSharedFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftMutableSharedFlow<T>) -> allshared.SkieKotlinSharedFlow<T> {
    return allshared.SkieKotlinSharedFlow(flow.delegate)
}

public func SkieKotlinSharedFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftStateFlow<T>) -> allshared.SkieKotlinSharedFlow<T> {
    return allshared.SkieKotlinSharedFlow(flow.delegate)
}

public func SkieKotlinSharedFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftMutableStateFlow<T>) -> allshared.SkieKotlinSharedFlow<T> {
    return allshared.SkieKotlinSharedFlow(flow.delegate)
}

public func SkieKotlinSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftSharedFlow<T>) -> allshared.SkieKotlinSharedFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinSharedFlow(flow.delegate)
}

public func SkieKotlinSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftMutableSharedFlow<T>) -> allshared.SkieKotlinSharedFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinSharedFlow(flow.delegate)
}

public func SkieKotlinSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftStateFlow<T>) -> allshared.SkieKotlinSharedFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinSharedFlow(flow.delegate)
}

public func SkieKotlinSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftMutableStateFlow<T>) -> allshared.SkieKotlinSharedFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinSharedFlow(flow.delegate)
}

extension allshared.SkieSwiftSharedFlow where T : Swift.AnyObject {

    public convenience init(_ flow: allshared.SkieKotlinSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinMutableSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieSwiftSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

extension allshared.SkieSwiftSharedFlow where T : Swift._ObjectiveCBridgeable {

    public convenience init(_ flow: allshared.SkieKotlinSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieSwiftSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

public func SkieKotlinOptionalSharedFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftSharedFlow<T>) -> allshared.SkieKotlinOptionalSharedFlow<T> {
    return allshared.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftOptionalSharedFlow<T>) -> allshared.SkieKotlinOptionalSharedFlow<T> {
    return allshared.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftMutableSharedFlow<T>) -> allshared.SkieKotlinOptionalSharedFlow<T> {
    return allshared.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftOptionalMutableSharedFlow<T>) -> allshared.SkieKotlinOptionalSharedFlow<T> {
    return allshared.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftStateFlow<T>) -> allshared.SkieKotlinOptionalSharedFlow<T> {
    return allshared.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftOptionalStateFlow<T>) -> allshared.SkieKotlinOptionalSharedFlow<T> {
    return allshared.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftMutableStateFlow<T>) -> allshared.SkieKotlinOptionalSharedFlow<T> {
    return allshared.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftOptionalMutableStateFlow<T>) -> allshared.SkieKotlinOptionalSharedFlow<T> {
    return allshared.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftSharedFlow<T>) -> allshared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftOptionalSharedFlow<T>) -> allshared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftMutableSharedFlow<T>) -> allshared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftOptionalMutableSharedFlow<T>) -> allshared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftStateFlow<T>) -> allshared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftOptionalStateFlow<T>) -> allshared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftMutableStateFlow<T>) -> allshared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinOptionalSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftOptionalMutableStateFlow<T>) -> allshared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinOptionalSharedFlow(flow.delegate)
}

extension allshared.SkieSwiftOptionalSharedFlow where T : Swift.AnyObject {

    public convenience init(_ flow: allshared.SkieKotlinSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinOptionalSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinMutableSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinOptionalMutableSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinOptionalStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinOptionalMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieSwiftSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

extension allshared.SkieSwiftOptionalSharedFlow where T : Swift._ObjectiveCBridgeable {

    public convenience init(_ flow: allshared.SkieKotlinSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinOptionalStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieSwiftSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

public func SkieKotlinMutableSharedFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftMutableSharedFlow<T>) -> allshared.SkieKotlinMutableSharedFlow<T> {
    return allshared.SkieKotlinMutableSharedFlow(flow.delegate)
}

public func SkieKotlinMutableSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftMutableSharedFlow<T>) -> allshared.SkieKotlinMutableSharedFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinMutableSharedFlow(flow.delegate)
}

extension allshared.SkieSwiftMutableSharedFlow where T : Swift.AnyObject {

    public convenience init(_ flow: allshared.SkieKotlinMutableSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

extension allshared.SkieSwiftMutableSharedFlow where T : Swift._ObjectiveCBridgeable {

    public convenience init(_ flow: allshared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

public func SkieKotlinOptionalMutableSharedFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftMutableSharedFlow<T>) -> allshared.SkieKotlinOptionalMutableSharedFlow<T> {
    return allshared.SkieKotlinOptionalMutableSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalMutableSharedFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftOptionalMutableSharedFlow<T>) -> allshared.SkieKotlinOptionalMutableSharedFlow<T> {
    return allshared.SkieKotlinOptionalMutableSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalMutableSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftMutableSharedFlow<T>) -> allshared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinOptionalMutableSharedFlow(flow.delegate)
}

public func SkieKotlinOptionalMutableSharedFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftOptionalMutableSharedFlow<T>) -> allshared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinOptionalMutableSharedFlow(flow.delegate)
}

extension allshared.SkieSwiftOptionalMutableSharedFlow where T : Swift.AnyObject {

    public convenience init(_ flow: allshared.SkieKotlinMutableSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinOptionalMutableSharedFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

extension allshared.SkieSwiftOptionalMutableSharedFlow where T : Swift._ObjectiveCBridgeable {

    public convenience init(_ flow: allshared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalMutableSharedFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

public func SkieKotlinStateFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftStateFlow<T>) -> allshared.SkieKotlinStateFlow<T> {
    return allshared.SkieKotlinStateFlow(flow.delegate)
}

public func SkieKotlinStateFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftMutableStateFlow<T>) -> allshared.SkieKotlinStateFlow<T> {
    return allshared.SkieKotlinStateFlow(flow.delegate)
}

public func SkieKotlinStateFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftStateFlow<T>) -> allshared.SkieKotlinStateFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinStateFlow(flow.delegate)
}

public func SkieKotlinStateFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftMutableStateFlow<T>) -> allshared.SkieKotlinStateFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinStateFlow(flow.delegate)
}

extension allshared.SkieSwiftStateFlow where T : Swift.AnyObject {

    public convenience init(_ flow: allshared.SkieKotlinStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

extension allshared.SkieSwiftStateFlow where T : Swift._ObjectiveCBridgeable {

    public convenience init(_ flow: allshared.SkieKotlinStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieSwiftStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

public func SkieKotlinOptionalStateFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftStateFlow<T>) -> allshared.SkieKotlinOptionalStateFlow<T> {
    return allshared.SkieKotlinOptionalStateFlow(flow.delegate)
}

public func SkieKotlinOptionalStateFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftOptionalStateFlow<T>) -> allshared.SkieKotlinOptionalStateFlow<T> {
    return allshared.SkieKotlinOptionalStateFlow(flow.delegate)
}

public func SkieKotlinOptionalStateFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftMutableStateFlow<T>) -> allshared.SkieKotlinOptionalStateFlow<T> {
    return allshared.SkieKotlinOptionalStateFlow(flow.delegate)
}

public func SkieKotlinOptionalStateFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftOptionalMutableStateFlow<T>) -> allshared.SkieKotlinOptionalStateFlow<T> {
    return allshared.SkieKotlinOptionalStateFlow(flow.delegate)
}

public func SkieKotlinOptionalStateFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftStateFlow<T>) -> allshared.SkieKotlinOptionalStateFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinOptionalStateFlow(flow.delegate)
}

public func SkieKotlinOptionalStateFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftOptionalStateFlow<T>) -> allshared.SkieKotlinOptionalStateFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinOptionalStateFlow(flow.delegate)
}

public func SkieKotlinOptionalStateFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftMutableStateFlow<T>) -> allshared.SkieKotlinOptionalStateFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinOptionalStateFlow(flow.delegate)
}

public func SkieKotlinOptionalStateFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftOptionalMutableStateFlow<T>) -> allshared.SkieKotlinOptionalStateFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinOptionalStateFlow(flow.delegate)
}

extension allshared.SkieSwiftOptionalStateFlow where T : Swift.AnyObject {

    public convenience init(_ flow: allshared.SkieKotlinStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinOptionalStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinOptionalMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

extension allshared.SkieSwiftOptionalStateFlow where T : Swift._ObjectiveCBridgeable {

    public convenience init(_ flow: allshared.SkieKotlinStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinOptionalStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieSwiftStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

public func SkieKotlinMutableStateFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftMutableStateFlow<T>) -> allshared.SkieKotlinMutableStateFlow<T> {
    return allshared.SkieKotlinMutableStateFlow(flow.delegate)
}

public func SkieKotlinMutableStateFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftMutableStateFlow<T>) -> allshared.SkieKotlinMutableStateFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinMutableStateFlow(flow.delegate)
}

extension allshared.SkieSwiftMutableStateFlow where T : Swift.AnyObject {

    public convenience init(_ flow: allshared.SkieKotlinMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

extension allshared.SkieSwiftMutableStateFlow where T : Swift._ObjectiveCBridgeable {

    public convenience init(_ flow: allshared.SkieKotlinMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

public func SkieKotlinOptionalMutableStateFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftMutableStateFlow<T>) -> allshared.SkieKotlinOptionalMutableStateFlow<T> {
    return allshared.SkieKotlinOptionalMutableStateFlow(flow.delegate)
}

public func SkieKotlinOptionalMutableStateFlow<T : Swift.AnyObject>(_ flow: allshared.SkieSwiftOptionalMutableStateFlow<T>) -> allshared.SkieKotlinOptionalMutableStateFlow<T> {
    return allshared.SkieKotlinOptionalMutableStateFlow(flow.delegate)
}

public func SkieKotlinOptionalMutableStateFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftMutableStateFlow<T>) -> allshared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinOptionalMutableStateFlow(flow.delegate)
}

public func SkieKotlinOptionalMutableStateFlow<T : Swift._ObjectiveCBridgeable>(_ flow: allshared.SkieSwiftOptionalMutableStateFlow<T>) -> allshared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType> {
    return allshared.SkieKotlinOptionalMutableStateFlow(flow.delegate)
}

extension allshared.SkieSwiftOptionalMutableStateFlow where T : Swift.AnyObject {

    public convenience init(_ flow: allshared.SkieKotlinMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinOptionalMutableStateFlow<T>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}

extension allshared.SkieSwiftOptionalMutableStateFlow where T : Swift._ObjectiveCBridgeable {

    public convenience init(_ flow: allshared.SkieKotlinMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

    public convenience init(_ flow: allshared.SkieSwiftOptionalMutableStateFlow<T>) {
        self.init(internal: flow.delegate)
    }

}
