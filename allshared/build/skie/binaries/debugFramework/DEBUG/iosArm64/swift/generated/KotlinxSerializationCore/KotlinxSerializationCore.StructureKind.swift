// Generated by Touchlab SKIE 0.10.0

import Foundation

extension allshared.Skie.KotlinxSerializationCore.StructureKind {

    @frozen
    public enum __Sealed : Swift.Hashable {

        case cLASS(allshared.Kotlinx_serialization_coreStructureKind.CLASS)
        case lIST(allshared.Kotlinx_serialization_coreStructureKind.LIST)
        case mAP(allshared.Kotlinx_serialization_coreStructureKind.MAP)
        case oBJECT(allshared.Kotlinx_serialization_coreStructureKind.OBJECT)

    }

}

public func onEnum<__Sealed : allshared.Kotlinx_serialization_coreStructureKind>(of sealed: __Sealed) -> allshared.Skie.KotlinxSerializationCore.StructureKind.__Sealed {
    if let sealed = sealed as? allshared.Kotlinx_serialization_coreStructureKind.CLASS {
        return allshared.Skie.KotlinxSerializationCore.StructureKind.__Sealed.cLASS(sealed)
    } else if let sealed = sealed as? allshared.Kotlinx_serialization_coreStructureKind.LIST {
        return allshared.Skie.KotlinxSerializationCore.StructureKind.__Sealed.lIST(sealed)
    } else if let sealed = sealed as? allshared.Kotlinx_serialization_coreStructureKind.MAP {
        return allshared.Skie.KotlinxSerializationCore.StructureKind.__Sealed.mAP(sealed)
    } else if let sealed = sealed as? allshared.Kotlinx_serialization_coreStructureKind.OBJECT {
        return allshared.Skie.KotlinxSerializationCore.StructureKind.__Sealed.oBJECT(sealed)
    } else {
        fatalError("Unknown subtype \(sealed). This error should not happen under normal circumstances since SirClass: allshared.Kotlinx_serialization_coreStructureKind is sealed.")
    }
}

@_disfavoredOverload
public func onEnum<__Sealed : allshared.Kotlinx_serialization_coreStructureKind>(of sealed: __Sealed?) -> allshared.Skie.KotlinxSerializationCore.StructureKind.__Sealed? {
    if let sealed {
        return onEnum(of: sealed) as allshared.Skie.KotlinxSerializationCore.StructureKind.__Sealed
    } else {
        return nil
    }
}
